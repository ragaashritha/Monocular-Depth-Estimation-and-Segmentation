Timer unit: 1e-06 s

Total time: 156.793 s
File: <ipython-input-29-899228ae9e6e>
Function: test at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           def test():
    12         1         11.0     11.0      0.0    epochs=1
    13         1          2.0      2.0      0.0    lr=0.001
    14         1        101.0    101.0      0.0    criterion = nn.MSELoss()
    15         1         59.0     59.0      0.0    l1_criterion = nn.L1Loss()
    16                                           
    17         1       2794.0   2794.0      0.0    optimizer = torch.optim.Adam( model.parameters(), lr )
    18         1          3.0      3.0      0.0    best_val_acc_mask = [0,0]
    19         1          2.0      2.0      0.0    best_val_acc_depth = [0,0]
    20                                             # Start training...
    21                                             # print(f"Training starts at {datetime.datetime.now()} ")
    22         1          3.0      3.0      0.0    train_start_time = time.time()
    23                                             # Store the best validation loss
    24         2         10.0      5.0      0.0    for epoch in range(epochs):   
    25                                                 # torch.save(model.state_dict(), path)
    26         1          2.0      2.0      0.0        adjust_lr = False
    27                                                 # Adjust learning rate if flag is set
    28         1          2.0      2.0      0.0        if adjust_lr:
    29                                                   lr = adjust_learning_rate(optimizer, epoch, lr)
    30                                           
    31         1          2.0      2.0      0.0        epoch_time = time.time()
    32                                           
    33                                                 # Init training loss
    34         1          8.0      8.0      0.0        batch_time = AverageMeter()
    35         1          3.0      3.0      0.0        losses     = AverageMeter()
    36         1          3.0      3.0      0.0        losses_depth = AverageMeter()
    37         1          3.0      3.0      0.0        losses_mask  = AverageMeter()
    38         1          3.0      3.0      0.0        losses_l1depth = AverageMeter()
    39         1          3.0      3.0      0.0        losses_l1mask = AverageMeter()
    40         1          3.0      3.0      0.0        train_Acc_Mask     = AverageMeter()
    41         1          3.0      3.0      0.0        train_Acc_Depth     = AverageMeter()
    42                                           
    43                                                 # Init validation loss
    44         1          7.0      7.0      0.0        val_losses     = AverageMeter()
    45         1          3.0      3.0      0.0        val_losses_depth = AverageMeter()
    46         1          3.0      3.0      0.0        val_losses_mask  = AverageMeter()
    47         1          3.0      3.0      0.0        val_losses_l1depth = AverageMeter()
    48         1          3.0      3.0      0.0        val_losses_l1mask = AverageMeter()
    49         1          3.0      3.0      0.0        val_Acc_Depth = AverageMeter()
    50         1          3.0      3.0      0.0        val_Acc_Mask = AverageMeter()
    51                                                 
    52         1         42.0     42.0      0.0        N = len(m_train_loader)
    53                                           
    54                                                 # Switch to train mode
    55         1       2281.0   2281.0      0.0        model.train()
    56                                           
    57         1       3507.0   3507.0      0.0        pbar1 = tqdm(m_train_loader)
    58         1          6.0      6.0      0.0        end = time.time()
    59                                                 #################
    60                                                 # Training loop #
    61                                                 #################
    62       220   16317324.0  74169.7     10.4        for i, sample_batched in enumerate(pbar1):
    63                                           
    64                                                     #Prepare sample and target
    65       219    1377015.0   6287.7      0.9            bg_n    = sample_batched['bg'].to(device)
    66       219    1279602.0   5842.9      0.8            fg_bg_n = sample_batched['fg_bg'].to(device)
    67       219     481442.0   2198.4      0.3            mask_n  = sample_batched['mask'].to(device)
    68       219     440968.0   2013.6      0.3            depth_n = sample_batched['depth'].to(device)
    69                                           
    70                                                     # Normalize depth
    71                                                     # depth_n = DepthNorm( depth )
    72                                           
    73                                                     # One optimization iteration
    74       219     782902.0   3574.9      0.5            optimizer.zero_grad()
    75                                           
    76                                                     # Predict
    77       219    4356064.0  19890.7      2.8            output = model( bg_n, fg_bg_n)
    78                                           
    79                                                     # Compute the loss
    80       219      50655.0    231.3      0.0            l_mask  = criterion(output[1], mask_n)
    81       219      34593.0    158.0      0.0            l1_mask = l1_criterion(output[1], mask_n)
    82       219   13860483.0  63289.9      8.8            l_depth = torch.clamp((1 - ssim(output[0], depth_n, val_range = 1000.0 / 10.0)) * 0.5, 0, 1)
    83       219      20602.0     94.1      0.0            l_depth = l_depth.mean()
    84       219      39600.0    180.8      0.0            l1_depth = l1_criterion(output[0], depth_n)
    85                                           
    86       219    2231621.0  10190.1      1.4            loss = (1.0 * l_depth.item()) + (1.0 * l_mask) + (0.1 * l1_depth) + (0.3 * l1_mask)
    87                                           
    88                                                     # Update step
    89       219    3342259.0  15261.5      2.1            loss.backward()
    90       219   43870621.0 200322.5     28.0            optimizer.step()
    91                                                   
    92       219      15968.0     72.9      0.0            losses.update(loss.data.item(), bg_n.size(0))
    93       219       5577.0     25.5      0.0            losses_depth.update(l_depth.data.item(), bg_n.size(0))
    94       219       4516.0     20.6      0.0            losses_mask.update(l_mask.data.item(), bg_n.size(0))
    95       219       4212.0     19.2      0.0            losses_l1depth.update(l1_depth.data.item(), bg_n.size(0))
    96       219       4242.0     19.4      0.0            losses_l1mask.update(l1_mask.data.item(), bg_n.size(0))
    97                                           
    98                                                     #Measure Accuracy
    99       219      94097.0    429.7      0.1            acc_depth = mIoU( output[0], depth_n)
   100       219      63806.0    291.4      0.0            acc_mask  = mIoU( output[1], mask_n)
   101       219      14796.0     67.6      0.0            train_Acc_Mask.update(acc_mask, fg_bg_n.size(0))
   102       219       9998.0     45.7      0.0            train_Acc_Depth.update(acc_depth, fg_bg_n.size(0))
   103                                           
   104                                                     
   105                                           
   106                                                     # # Measure elapsed time
   107                                                     # batch_time.update(time.time() - end)
   108                                                     # end = time.time()
   109                                                     # eta = str(datetime.timedelta(seconds=int(batch_time.val*(N - i))))
   110       219     286415.0   1307.8      0.2            pbar1.set_description(desc = f'[{epoch}] loss={loss.item()} mask={l_mask.item()} depth={l_depth.item()}')
   111                                                     
   112                                                     # Log progress
   113       219       1146.0      5.2      0.0            if i % 10 == 0:
   114        22         70.0      3.2      0.0              global_step = epoch*N+i
   115                                                       # Write to summary
   116        22       5604.0    254.7      0.0              _writer.addToSummary('Global/Loss', losses.val, global_step)
   117        22       1855.0     84.3      0.0              _writer.addToSummary('Global/Mask_Loss', losses_mask.val, global_step)
   118        22       1177.0     53.5      0.0              _writer.addToSummary('Global/Depth_Loss', losses_depth.val, global_step)
   119        22       1092.0     49.6      0.0              _writer.addToSummary('Global/l1_Mask_Loss', losses_l1depth.val, global_step)
   120        22       1113.0     50.6      0.0              _writer.addToSummary('Global/l1_Depth_Loss', losses_l1mask.val, global_step)
   121                                           
   122        22      15228.0    692.2      0.0              _writer.addToSummary('Global/Mask_Acc', train_Acc_Mask.val, global_step)
   123        22      13194.0    599.7      0.0              _writer.addToSummary('Global/Depth_Acc', train_Acc_Depth.val, global_step)
   124                                           
   125        22   47160724.0 2143669.3     30.1              _writer.visualize_image("Global",sample_batched, output, global_step)
   126                                           
   127                                           
   128        22         99.0      4.5      0.0              if i% 500:
   129        21    3605125.0 171672.6      2.3                  _writer.save_checkpoint(model)
   130                                                       # if i % 2500 == 0 and i!=0:
   131                                                       #   print('Epoch: [{0}][{1}/{2}]\t'
   132                                                       #       'Epoch Time={epochTime}\t'
   133                                                       #       'Time Drift={timeDrift}\t'
   134                                                       #       'Loss {losses.avg:.4f}\t'
   135                                                       #       'Mask Loss={losses_mask.avg:.4f} Acc={train_Acc_Mask.avg:.4f}\t'
   136                                                       #       'Depth Loss={losses_depth.avg:.4f} Acc={train_Acc_Depth.avg:.4f}\t'
   137                                                       #       .format(epoch, i, N, epochTime=time_delta_now(epoch_time), timeDrift=time_delta_now(train_start_time),
   138                                                       #         losses=losses, losses_mask=losses_mask, train_Acc_Mask=train_Acc_Mask, losses_depth=losses_depth, 
   139                                                       #         train_Acc_Depth=train_Acc_Depth))
   140                                           
   141                                                 #print in console
   142         1          9.0      9.0      0.0        print('Epoch: [{0}]\t'
   143                                                       'Epoch Time={epochTime}\t'
   144                                                       'Time Drift={timeDrift}\t'
   145                                                       'Loss {losses.avg:.4f}\t'
   146                                                       'Mask Loss={losses_mask.avg:.4f}  Depth Loss={losses_depth.avg:.4f}\t'
   147                                                       'Mask Acc={train_Acc_Mask.avg:.4f}  Depth Acc={train_Acc_Depth.avg:.4f}\t'
   148         1         64.0     64.0      0.0              .format(epoch, epochTime=time_delta_now(epoch_time), timeDrift=time_delta_now(train_start_time),
   149         1          3.0      3.0      0.0                      losses=losses, losses_mask=losses_mask, train_Acc_Mask=train_Acc_Mask, losses_depth=losses_depth, 
   150         1       2574.0   2574.0      0.0                      train_Acc_Depth=train_Acc_Depth))
   151                                           
   152         1         40.0     40.0      0.0        print("Let's Validate with some mini batches")
   153         1          5.0      5.0      0.0        val_start_time = time.time()
   154         1       2613.0   2613.0      0.0        model.eval()
   155         1         18.0     18.0      0.0        with torch.no_grad():
   156         1         52.0     52.0      0.0          N = len(m_test_loader)
   157         1       1333.0   1333.0      0.0          pbar2 = tqdm(m_test_loader)
   158        48   10064195.0 209670.7      6.4          for i, sample_batch in enumerate(pbar2):
   159        47     509188.0  10833.8      0.3            bg_n    = sample_batched['bg'].to(device)
   160        47     447803.0   9527.7      0.3            fg_bg_n = sample_batched['fg_bg'].to(device)
   161        47     207866.0   4422.7      0.1            mask_n  = sample_batched['mask'].to(device)
   162        47     184397.0   3923.3      0.1            depth_n = sample_batched['depth'].to(device)
   163                                           
   164        47    1965438.0  41817.8      1.3            output = model(bg_n,fg_bg_n)
   165                                                     
   166        47      12310.0    261.9      0.0            l_mask  = criterion(output[1], mask_n)
   167        47      33545.0    713.7      0.0            l1_mask = l1_criterion(output[1], mask_n)
   168        47      30806.0    655.4      0.0            l_depth = criterion(output[0], depth_n)
   169        47      15005.0    319.3      0.0            l1_depth = l1_criterion(output[0], depth_n)
   170                                           
   171        47     855260.0  18197.0      0.5            loss = (2.0 * l_depth.item()) + (1.0 * l_mask) + (0.1 * l1_depth) + (0.3 * l1_mask)
   172                                           
   173        47     283307.0   6027.8      0.2            pbar2.set_description(desc = f'[{epoch}] loss={loss.item()} mask={l_mask.item()} depth={l_depth.item()}')
   174                                           
   175        47       5027.0    107.0      0.0            val_losses.update(loss.data.item(), bg_n.size(0))
   176        47       2252.0     47.9      0.0            val_losses_depth.update(l_depth.data.item(), bg_n.size(0))
   177        47       1528.0     32.5      0.0            val_losses_mask.update(l_mask.data.item(), bg_n.size(0))
   178        47       1699.0     36.1      0.0            val_losses_l1depth.update(l1_depth.data.item(), bg_n.size(0))
   179        47       1656.0     35.2      0.0            val_losses_l1mask.update(l1_mask.data.item(), bg_n.size(0))
   180                                           
   181                                                     #Measure Accuracy
   182        47      36799.0    783.0      0.0            acc_depth = mIoU( output[0], depth_n)
   183        47      22081.0    469.8      0.0            acc_mask  = mIoU( output[1], mask_n)
   184        47       7548.0    160.6      0.0            val_Acc_Mask.update(acc_mask, fg_bg_n.size(0))
   185        47       4226.0     89.9      0.0            val_Acc_Depth.update(acc_depth, fg_bg_n.size(0))
   186        47        286.0      6.1      0.0            if i > 100:
   187                                                       break
   188         1    2105955.0 2105955.0      1.3        _writer.visualize_image("validation",sample_batched, output, epoch)
   189         1          8.0      8.0      0.0        print('Epoch: [{0}][{1}/{2}]\t'
   190                                                   'Valid Time={validTime}\t'
   191                                                   'Time Drift={timeDrift}\t'
   192                                                   'Loss {losses.avg:.4f}\t'
   193                                                   'Mask Loss={losses_mask.avg:.4f} Acc={val_Acc_Mask:.4f}\t'
   194                                                   'Depth Loss={losses_depth.avg:.4f} Acc={val_Acc_Depth:.4f}\t'
   195         1         31.0     31.0      0.0          .format(epoch, i, N, validTime=time_delta_now(val_start_time), timeDrift=time_delta_now(train_start_time),
   196         1          4.0      4.0      0.0                  losses=val_losses, losses_mask=val_losses_mask, val_Acc_Mask=train_Acc_Mask.avg, losses_depth=val_losses_depth, 
   197         1      44588.0  44588.0      0.0                  val_Acc_Depth=train_Acc_Depth.avg))
   198         1      15617.0  15617.0      0.0        print("Sample Validated Images")
   199                                                 
   200                                           
   201                                                 #################
   202                                                 # Track results #
   203                                                 #################
   204                                                 #Log Train Epoch
   205         1        192.0    192.0      0.0        _writer.addToSummary('Loss/train', losses.avg, epoch)
   206         1         46.0     46.0      0.0        _writer.addToSummary('Loss/valid', val_losses.avg, epoch)
   207         1       5422.0   5422.0      0.0        _writer.addToSummary('Mask_Acc/train',   train_Acc_Mask.avg, epoch)
   208         1       4484.0   4484.0      0.0        _writer.addToSummary('Mask_Acc/valid',   val_Acc_Mask.avg, epoch)
   209         1        251.0    251.0      0.0        _writer.addToSummary('Depth_Acc/train',  train_Acc_Depth.avg, epoch)
   210         1        209.0    209.0      0.0        _writer.addToSummary('Depth_Acc/valid',  val_Acc_Depth.avg, epoch)
   211         1         72.0     72.0      0.0        _writer.addToSummary('Mask_Loss/train',  losses_mask.val, epoch)
   212         1         38.0     38.0      0.0        _writer.addToSummary('Mask_Loss/valid',  val_losses_mask.val, epoch)
   213         1         34.0     34.0      0.0        _writer.addToSummary('Depth_Loss/train', losses_depth.val, epoch)
   214         1         32.0     32.0      0.0        _writer.addToSummary('Depth_Loss/valid', val_losses_depth.val, epoch)
   215         1         32.0     32.0      0.0        _writer.addToSummary('l1_Mask_Loss/train', losses_l1depth.val, epoch)
   216         1         32.0     32.0      0.0        _writer.addToSummary('l1_Mask_Loss/valid', val_losses_l1depth.val, epoch)
   217         1         33.0     33.0      0.0        _writer.addToSummary('l1_Depth_Loss/train', losses_l1mask.val, epoch)
   218         1         31.0     31.0      0.0        _writer.addToSummary('l1_Depth_Loss/valid', val_losses_l1mask.val, epoch)
   219                                           
   220         1        508.0    508.0      0.0        if(val_Acc_Mask.avg > best_val_acc_mask[0]):
   221         1          4.0      4.0      0.0          best_val_acc_mask = [val_Acc_Mask.avg,epoch]
   222         1         77.0     77.0      0.0        if(val_Acc_Depth.avg > best_val_acc_depth[0]):
   223         1          3.0      3.0      0.0          best_val_acc_depth = [val_Acc_Depth.avg,epoch]
   224                                           
   225         1     108923.0 108923.0      0.1        _writer.save_checkpoint( model, val_Acc_Mask.avg, val_Acc_Depth.avg)
   226                                           
   227         1        395.0    395.0      0.0    print(f"Finished Training. Best Mask Acc: {best_val_acc_mask[0]} @ epoch {best_val_acc_mask[1]}")
   228         1        235.0    235.0      0.0    print(f"Finished Training. Best Depth Acc: {best_val_acc_depth[0]} @ epoch {best_val_acc_depth[1]}")
   229                                           
   230         1       1839.0   1839.0      0.0    _writer.close()